# -*- coding: utf-8 -*-
"""train.py

Automatically generated by Colaboratory.


"""

# Imports
import numpy as np
import os

from tflite_model_maker.config import ExportFormat, QuantizationConfig
from tflite_model_maker import model_spec
from tflite_model_maker import object_detector

from tflite_support import metadata

import tensorflow as tf
assert tf.__version__.startswith('2')

tf.get_logger().setLevel('ERROR')
from absl import logging
logging.set_verbosity(logging.ERROR)

# Confirm TF Version
print("\nTensorflow Version:")
print(tf.__version__)
print()

# Load Dataset
train_data = object_detector.DataLoader.from_pascal_voc(
    'test_29c/train',
    'test_29c/train',
    ['chicken', 'pork', 'egg', 'garlic', 'spinach', 'pumpkin', 'okra', 'onion', 'tomato', 'carrot', 'beef', 'potato', 'bell pepper', 'corn', 'egg plant', 'cabbage', 'fish', 'broccoli', 'radish', 'shrimp', 'ginger', 'chilli', 'tofu', 'bitter gourd', 'lettuce', 'bok choy', 'cauliflower', 'chinese cabbage', 'cucumber']
)

val_data = object_detector.DataLoader.from_pascal_voc(
    'test_29c/valid',
    'test_29c/valid',
    ['chicken', 'pork', 'egg', 'garlic', 'spinach', 'pumpkin', 'okra', 'onion', 'tomato', 'carrot', 'beef', 'potato', 'bell pepper', 'corn', 'egg plant', 'cabbage', 'fish', 'broccoli', 'radish', 'shrimp', 'ginger', 'chilli', 'tofu', 'bitter gourd', 'lettuce', 'bok choy', 'cauliflower', 'chinese cabbage', 'cucumber']
)

# Load model spec
spec = object_detector.EfficientDetSpec(
  model_name='efficientdet-lite4',
  uri='https://tfhub.dev/tensorflow/efficientdet/lite4/feature-vector/2',
  model_dir='/content/checkpoints',
  hparams='')

# Train the model
model = object_detector.create(train_data, model_spec=spec, batch_size=32, train_whole_model=True, epochs=10, validation_data=val_data)

# Evaluate the model
eval_result = model.evaluate(val_data)

# Print COCO metrics
print("mMAP Metrics:")
for label, metric_value in eval_result.items():
    print(f"{label}: {metric_value}")

# Add a line break after all the items have been printed
print()

# Export the model
model.export(export_dir='.', tflite_filename='EfficientDet4.tflite')

# Evaluate the tflite model
tflite_eval_result = model.evaluate_tflite('EfficientDet4.tflite', val_data)

# Print COCO metrics for tflite
print("mMAP metrics tflite")
for label, metric_value in tflite_eval_result.items():
    print(f"{label}: {metric_value}")
